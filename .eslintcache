[{"C:\\Node\\ratonmouse\\jefaseo-keyword-search\\src\\index.js":"1","C:\\Node\\ratonmouse\\jefaseo-keyword-search\\src\\App.js":"2","C:\\Node\\ratonmouse\\jefaseo-keyword-search\\src\\reportWebVitals.js":"3","C:\\Node\\ratonmouse\\jefaseo-keyword-search\\src\\sample.js":"4","C:\\Node\\ratonmouse\\jefaseo-keyword-search\\src\\utils\\getObjectToSend.js":"5","C:\\Node\\ratonmouse\\jefaseo-keyword-search\\src\\serp.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":3182,"mtime":1611950768698,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":3521,"mtime":1610221679822,"results":"11","hashOfConfig":"8"},{"size":3312,"mtime":1611950463456,"results":"12","hashOfConfig":"8"},{"size":8155,"mtime":1611421464811,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1cutn56",{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"C:\\Node\\ratonmouse\\jefaseo-keyword-search\\src\\index.js",[],["30","31"],"C:\\Node\\ratonmouse\\jefaseo-keyword-search\\src\\App.js",["32","33","34"],"C:\\Node\\ratonmouse\\jefaseo-keyword-search\\src\\reportWebVitals.js",[],"C:\\Node\\ratonmouse\\jefaseo-keyword-search\\src\\sample.js",["35","36","37"],"//  include the Keyword Extractor\r\nconst keyword_extractor = require('keyword-extractor');\r\nconst cheerio = require('cheerio');\r\nconst serp = require('./serp');\r\n\r\nexport const keywords = async (htmlgot = 'unknow') => {\r\n    const num = 100;\r\n    let palabras = [];\r\n    var options = {\r\n        host: 'google.es',\r\n        qs: {\r\n            q: 'aprender ingles gratis',\r\n            filter: 0,\r\n            pws: 0,\r\n        },\r\n        num,\r\n    };\r\n\r\n    const list = await serp.search(options);\r\n    console.log(list);\r\n\r\n    for (let x = 0; x < list.length; x++) {\r\n        try {\r\n            const webmia = await fetch(list[x].url);\r\n\r\n            let $ = new cheerio.load(await webmia.text());\r\n\r\n            const title = $('title').text() + ' ';\r\n            const description =\r\n                $('meta[name=description]').attr('content') + ' ';\r\n            const imgarray = $('img');\r\n            let img = '';\r\n            let imgaltcount = 0;\r\n            for (let i = 0; i < imgarray.length; i++) {\r\n                if (\r\n                    !!imgarray[i].attribs.alt &&\r\n                    imgarray[i].attribs.alt !== ''\r\n                ) {\r\n                    imgaltcount++;\r\n                }\r\n\r\n                img += imgarray[i].attribs.alt + ' ';\r\n            }\r\n\r\n            const h1 = $('h1').text() + ' ';\r\n            const h2 = $('h2').text() + ' ';\r\n            const strong = $('strong').text() + ' ';\r\n            const b = $('b').text() + ' ';\r\n            const p = $('p').text() + ' ';\r\n\r\n            let sentence = title + description + strong + img + b + p + h1 + h2;\r\n            sentence = sentence\r\n                .normalize('NFD')\r\n                .replace(/[\\u0300-\\u036f]/g, '');\r\n            sentence = sentence.replace(/[^\\w\\s]/gi, '');\r\n            sentence = sentence.toLowerCase();\r\n\r\n            //  Extract the keywords\r\n            let res = keyword_extractor.extract(sentence, {\r\n                language: 'spanish',\r\n                remove_digits: true,\r\n                return_changed_case: false,\r\n                remove_duplicates: false,\r\n            });\r\n\r\n            let count = [];\r\n            res.filter((v, i, a) => {\r\n                if (a.indexOf(v) === i) {\r\n                    count.push({ valor: v, num: 1 });\r\n                    return true;\r\n                } else {\r\n                    const inds = count.findIndex((item) => {\r\n                        return item.valor === v;\r\n                    });\r\n                    count[inds].num += 1;\r\n                }\r\n            });\r\n\r\n            count.sort(function (a, b) {\r\n                return b.num - a.num;\r\n            });\r\n\r\n            for (let y = 0; y < 40; y++) {\r\n                if (!!count[y])\r\n                    palabras.push({\r\n                        valor: count[y].valor,\r\n                        num: 40 - y + num - x,\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n            continue;\r\n        }\r\n    }\r\n    let resfin = [];\r\n\r\n    palabras.filter((v, i, a) => {\r\n        if (a.map((e) => e.valor).indexOf(v.valor) === i) {\r\n            resfin.push(v);\r\n            return true;\r\n        } else {\r\n            const inds = resfin.findIndex((item) => {\r\n                return item.valor === v.valor;\r\n            });\r\n            resfin[inds].num += v.num;\r\n        }\r\n    });\r\n\r\n    resfin.sort(function (a, b) {\r\n        return b.num - a.num;\r\n    });\r\n\r\n    console.log('resfin', resfin);\r\n    return resfin;\r\n};\r\n","C:\\Node\\ratonmouse\\jefaseo-keyword-search\\src\\utils\\getObjectToSend.js",["38","39"],"const cheerio = require('cheerio');\r\n\r\nasync function getObjectToSend(content) {\r\n    try {\r\n        let $ = new cheerio.load(content);\r\n        let tableCont = [];\r\n        const h1 = $('h1').text();\r\n        const lead = $('h1 + p').text();\r\n\r\n        const alt = $('img').attr('alt');\r\n        const imagetoload = $('img').attr('src').split(',')[1];\r\n\r\n        //cambiando el id de los h2 para poner link\r\n        $('h2').map(function (i, el) {\r\n            $(this).attr('id', $(this).text().replace(/ /g, '-'));\r\n            console.log($(this).attr());\r\n            let texth2 = $(this).text();\r\n            tableCont.push(texth2);\r\n        });\r\n\r\n        const imgname = $('img').attr('data-file-name');\r\n        let name = '';\r\n\r\n        const getUrl = async (imagetoload, imgname) => {\r\n            var formdata = new FormData();\r\n            formdata.append('image', imagetoload);\r\n            var requestOptions = {\r\n                method: 'POST',\r\n                body: formdata,\r\n                redirect: 'follow',\r\n            };\r\n            let res = await fetch(\r\n                `https://api.imgbb.com/1/upload?name=${imgname}&key=2aa46fc36dc23a399e435705d47e4c1c`,\r\n                requestOptions\r\n            );\r\n            res = await res.json();\r\n            return res.data.url;\r\n        };\r\n\r\n        //obtener el html final\r\n        let html = $.html($('h2').get(0));\r\n\r\n        let newhtml = await Promise.all(\r\n            $('h2 ~').map(async function (i, elem) {\r\n                if ($(elem)[0].name === 'div') {\r\n                    const imagetoload = $(elem)\r\n                        .find('img')\r\n                        .attr('src')\r\n                        .split(',')[1];\r\n                    const imgname = $(elem).find('img').attr('data-file-name');\r\n                    const resp = await getUrl(imagetoload, imgname);\r\n                    console.log(elem);\r\n                    $(elem).html(`<img src=${resp} />`);\r\n                    return Promise.resolve(elem);\r\n                }\r\n                return Promise.resolve(elem);\r\n            })\r\n        );\r\n        html += $.html(newhtml);\r\n        console.log(html);\r\n        //obtener imagen principal\r\n        let newResp = await getUrl(imagetoload, imgname);\r\n        name = newResp;\r\n\r\n        let datatosend = {\r\n            content: {\r\n                tableCont,\r\n                h1,\r\n                lead,\r\n                img: {\r\n                    name,\r\n                    alt,\r\n                },\r\n                html,\r\n                recom: [\r\n                    {\r\n                        prod: ['g502'],\r\n                        h2: 'mas baratos',\r\n                    },\r\n                ],\r\n            },\r\n            seo: {\r\n                opengraph: {\r\n                    sitename: 'Raton Gaming',\r\n                },\r\n                twiter: {\r\n                    author: '@richar',\r\n                    site: '@site',\r\n                },\r\n                title: h1 + ' | ' + 'Raton Gaming',\r\n                description: lead,\r\n                url: h1.toLowerCase().replace(/ /g, '-'),\r\n                img: name,\r\n            },\r\n        };\r\n\r\n        return datatosend;\r\n    } catch (error) {\r\n        console.log('error', error);\r\n    }\r\n}\r\n\r\nmodule.exports = { getObjectToSend };\r\n","C:\\Node\\ratonmouse\\jefaseo-keyword-search\\src\\serp.js",["40","41","42"],"const util = require('util');\r\n\r\nconst request = require('request-promise-native');\r\nconst cheerio = require('cheerio');\r\n\r\nconst delay = util.promisify(setTimeout);\r\n\r\nconst DEFAULT_USER_AGENT =\r\n    'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1';\r\nconst HTTP_OK = 200;\r\n\r\nconst SEARCH = '/search';\r\n\r\nconst DEFAULT_OPTIONS = {\r\n    num: 10,\r\n    retry: 3,\r\n    delay: 0,\r\n    resolveWithFullResponse: true,\r\n    jar: true,\r\n};\r\n\r\n/**\r\n *  Make a search based on a keyword on a google domain\r\n *\r\n * @param  {json} params  the options used to make the google search, based on the following structure :\r\n * {\r\n *      host : \"google.be\",  //the google host (eg : google.com, google.fr, ... - default : google.com)\r\n *      num  : 100, // number of result\r\n *      qs : {\r\n *        q : \"keyword\", // The keyword\r\n *        hl : \"fr\"      // the language (iso code), if not specify, the SERP can contains a mix\r\n *        //and all query parameters supported by Google : https://moz.com/ugc/the-ultimate-guide-to-the-google-search-parameters\r\n *      }\r\n *      // If needed, add all request options like proxy, ... : https://github.com/request/request\r\n * }\r\n * @returns {Array<string>} list of url that match to the Google SERP\r\n */\r\nasync function search(params) {\r\n    const options = buildOptions(params);\r\n    const result = await doRequest(options);\r\n\r\n    if (Array.isArray(result)) {\r\n        return result.slice(0, options.num);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Check is the search options are well defined & add default value\r\n *\r\n * @param  {Json} params  The params to check\r\n * @returns {Json} a Json clone of the params with default values\r\n */\r\nfunction buildOptions(params) {\r\n    if (!params.qs) {\r\n        throw new Error('No qs attribute in the options');\r\n    }\r\n\r\n    if (!params.qs.q) {\r\n        throw new Error(\"the option object doesn't contain the keyword\");\r\n    }\r\n\r\n    const options = Object.assign({}, DEFAULT_OPTIONS, params);\r\n\r\n    // options.url = getGoogleUrl(params, SEARCH);\r\n\r\n    // Making request on Google without user agent => not a good idea\r\n    const hasUserAgent = (options.headers || {})['User-Agent'];\r\n\r\n    if (!hasUserAgent) {\r\n        options.headers = options.headers || {};\r\n        options.headers['User-Agent'] = DEFAULT_USER_AGENT;\r\n    }\r\n\r\n    if (options.proxyList) {\r\n        options.proxy = options.proxyList.pick().getUrl();\r\n    }\r\n\r\n    // If we want to get the number of results => force the interface language = EN\r\n    // Otherwise it becomes difficult to parse the html body\r\n    if (options.numberOfResults) {\r\n        options.qs.hl = 'EN';\r\n    }\r\n\r\n    return options;\r\n}\r\n\r\n/**\r\n * Execute a Google request with some retries in the case of errors\r\n *\r\n * @param  {Json} options The search options\r\n * @param {number} nbrOfLinks the number of links already retrieved\r\n * @returns {Array<string>|number} The list of url found in the SERP or the number of result\r\n */\r\nasync function doRequest(options, nbrOfLinks = 0) {\r\n    let response = -1;\r\n\r\n    for (let i = 0; i < options.retry; i += 1) {\r\n        try {\r\n            /* eslint-disable no-await-in-loop */\r\n\r\n            // await delay(options.delay);\r\n            response = await execRequest(options, nbrOfLinks);\r\n            break;\r\n        } catch (error) {\r\n            if (options.proxyList) {\r\n                /* eslint-disable no-param-reassign */\r\n                options.proxy = options.proxyList.pick().getUrl();\r\n            }\r\n\r\n            if (i === options.retry - 1) {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    return response;\r\n}\r\n\r\n/**\r\n * Execute a Google Request\r\n *\r\n * @param  {Json} options The search options\r\n * @param {number} nbrOfLinks the number of links already retrieved\r\n * @returns {Array<string>|number} The list of url found in the SERP or the number of result\r\n */\r\nasync function execRequest(options, nbrOfLinks) {\r\n    try {\r\n        const response = await fetch({\r\n            method: 'get',\r\n            url: 'https://www.google.com/search?q=aprender+ingles',\r\n            responseType: 'stream',\r\n            headers: {\r\n                'user-agent':\r\n                    'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1',\r\n            },\r\n            mode: 'no-cors',\r\n        });\r\n        console.log(response);\r\n        if (response && response.statusCode !== HTTP_OK) {\r\n            throw new Error(`Invalid HTTP status code on ${options.url}`);\r\n        }\r\n        if (options.numberOfResults) {\r\n            return getNumberOfResults(options, response);\r\n        }\r\n\r\n        return await getLinks(options, response, nbrOfLinks);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n/**\r\n * Return the number of result found in Google\r\n *\r\n * @param  {Json} options The search options\r\n * @param  {Object} response The Http response\r\n * @returns {number} The number of results\r\n */\r\nfunction getNumberOfResults(options, response) {\r\n    const $ = cheerio.load(response.body);\r\n\r\n    const hasNumberofResult = $('body').find('#result-stats').length > 0;\r\n\r\n    if (!hasNumberofResult) {\r\n        return 0;\r\n    }\r\n\r\n    const result = $('#result-stats').text().split(' ');\r\n\r\n    if (result.length > 1) {\r\n        // Convert String with a format number into a number\r\n        return Number(result[1].replace(/\\D/g, ''));\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n/**\r\n * Get all URL(links) found in the top positions of the SERP\r\n *\r\n * @param {Json} options The search options\r\n * @param {Object} response The Http response\r\n * @param {number} nbrOfLinks the number of links already retrieved\r\n * @returns {Array} The list of the links\r\n */\r\nasync function getLinks(options, response, nbrOfLinks) {\r\n    const result = extractLinks(response.body);\r\n    let allLinks = result.links;\r\n\r\n    if (allLinks.length === 0) {\r\n        return allLinks;\r\n    }\r\n\r\n    const nbr = nbrOfLinks + allLinks.length;\r\n\r\n    if (nbr >= options.num) {\r\n        return allLinks;\r\n    }\r\n\r\n    if (result.nextPage) {\r\n        const nextPageOptions = Object.assign({}, options);\r\n\r\n        nextPageOptions.path = result.nextPage;\r\n\r\n        allLinks = [...allLinks, ...(await doRequest(nextPageOptions, nbr))];\r\n    }\r\n\r\n    return allLinks;\r\n}\r\n\r\n/**\r\n * Build the url used to make the request on Google. It could be done directly or via a scrape api url\r\n *\r\n * @param  {json} options the options used to build the url\r\n * @returns {string} the url\r\n */\r\nfunction buildUrl(options) {\r\n    return options.scrapeApiUrl\r\n        ? `${options.scrapeApiUrl}&url=${buildGoogleUrl(options)}`\r\n        : buildGoogleUrl(options);\r\n}\r\n\r\nfunction buildGoogleUrl(options) {\r\n    // path is used when we request the second page of the SERP\r\n    if (options.path) {\r\n        return `https://www.${options.host || 'google.com'}${options.path}`;\r\n    }\r\n\r\n    const url = `https://www.${options.host || 'google.com'}${SEARCH}`;\r\n    const queryparams = [];\r\n\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const q in options.qs) {\r\n        queryparams.push(`${q}=${options.qs[q]}`);\r\n    }\r\n\r\n    return encodeURI(`${url}?${queryparams.join('&')}`);\r\n}\r\n\r\n/**\r\n * extractLinks - Get the links from the HTML body\r\n *\r\n * @param  {type} body th HTML body\r\n * @returns {Object} The list of the links & information about the next SERP page\r\n */\r\n\r\nfunction extractLinks(body) {\r\n    const links = [];\r\n\r\n    const $ = cheerio.load(body);\r\n\r\n    // Get the links matching to the web sites\r\n    // Update May 2020 : search only the h3. Google changes its CSS name\r\n    // $('body').find('.srg h3').each((i, h3) => {\r\n    $('body')\r\n        .find('h3')\r\n        .each((i, h3) => {\r\n            if ($(h3).parent()) {\r\n                const href = $(h3).parent().attr('href');\r\n\r\n                if (href) {\r\n                    links.push({ url: href, title: $(h3).text() });\r\n                }\r\n            }\r\n        });\r\n\r\n    // Get the link used to access to the next google page for this result\r\n    const nextPage = $('#pnnext').attr('href');\r\n\r\n    return { links, nextPage };\r\n}\r\n\r\nmodule.exports.search = search;\r\n",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":5,"column":7,"nodeType":"49","messageId":"50","endLine":5,"endColumn":14},{"ruleId":"47","severity":1,"message":"51","line":8,"column":21,"nodeType":"49","messageId":"50","endLine":8,"endColumn":31},{"ruleId":"47","severity":1,"message":"52","line":23,"column":17,"nodeType":"49","messageId":"50","endLine":23,"endColumn":20},{"ruleId":"47","severity":1,"message":"53","line":39,"column":21,"nodeType":"49","messageId":"50","endLine":39,"endColumn":32},{"ruleId":"54","severity":1,"message":"55","line":67,"column":34,"nodeType":"56","messageId":"57","endLine":67,"endColumn":36},{"ruleId":"54","severity":1,"message":"55","line":97,"column":31,"nodeType":"56","messageId":"57","endLine":97,"endColumn":33},{"ruleId":"54","severity":1,"message":"58","line":14,"column":21,"nodeType":"59","messageId":"60","endLine":14,"endColumn":30},{"ruleId":"61","severity":1,"message":"62","line":90,"column":35,"nodeType":"63","messageId":"64","endLine":90,"endColumn":36},{"ruleId":"47","severity":1,"message":"65","line":3,"column":7,"nodeType":"49","messageId":"50","endLine":3,"endColumn":14},{"ruleId":"47","severity":1,"message":"66","line":6,"column":7,"nodeType":"49","messageId":"50","endLine":6,"endColumn":12},{"ruleId":"47","severity":1,"message":"67","line":219,"column":10,"nodeType":"49","messageId":"50","endLine":219,"endColumn":18},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'cheerio' is assigned a value but never used.","Identifier","unusedVar","'setSeolist' is assigned a value but never used.","'raw' is assigned a value but never used.","'imgaltcount' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from function.","FunctionExpression","expectedInside","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'request' is assigned a value but never used.","'delay' is assigned a value but never used.","'buildUrl' is defined but never used.","no-global-assign","no-unsafe-negation"]